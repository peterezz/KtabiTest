// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace KtabiTest.Model
{
    public partial class KitabiContext : DbContext
    {

        public KitabiContext(DbContextOptions<KitabiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Classes> Classes { get; set; }
        public virtual DbSet<CourseAppointment> CourseAppointment { get; set; }
        public virtual DbSet<Courses> Courses { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<StudentCourse> StudentCourse { get; set; }
        public virtual DbSet<StudentName> StudentName { get; set; }
        public virtual DbSet<StudentPhoneNumber> StudentPhoneNumber { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Classes>(entity =>
            {
                entity.HasKey(e => e.ClassId);

                entity.Property(e => e.ClassId).HasColumnName("ClassID");

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CourseAppointment>(entity =>
            {
                entity.HasKey(e => e.AppointmentId);

                entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");

                entity.Property(e => e.ClassId).HasColumnName("classID");

                entity.Property(e => e.CourseId).HasColumnName("courseID");

                entity.Property(e => e.Day1)
                    .HasMaxLength(50)
                    .HasColumnName("day1");

                entity.Property(e => e.Day2)
                    .HasMaxLength(50)
                    .HasColumnName("day2");

                entity.Property(e => e.Day3)
                    .HasMaxLength(50)
                    .HasColumnName("day3");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("endDate");

                entity.Property(e => e.EndTime).HasColumnName("endTime");

                entity.Property(e => e.Price)
                    .HasColumnType("money")
                    .HasColumnName("price");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("startDate");

                entity.Property(e => e.StartTime).HasColumnName("startTime");

                entity.Property(e => e.TeacherId).HasColumnName("teacherID");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.CourseAppointment)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK_CourseAppointment_Classes");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseAppointment)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_CourseAppointment_Courses");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.CourseAppointment)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("FK_CourseAppointment_Teacher");
            });

            modelBuilder.Entity<Courses>(entity =>
            {
                entity.HasKey(e => e.CourseId);

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.CourseName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NumberOfhours).HasColumnName("NumberOFhours");

                entity.Property(e => e.NumberOflectures).HasColumnName("NumberOFlectures");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.StudentId)
                    .ValueGeneratedNever()
                    .HasColumnName("StudentID");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .HasColumnName("address");

                entity.Property(e => e.ChurchName)
                    .HasMaxLength(50)
                    .HasColumnName("churchName");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkInformation)
                    .HasMaxLength(100)
                    .HasColumnName("workInformation");

                entity.HasOne(d => d.StudentNavigation)
                    .WithOne(p => p.Student)
                    .HasForeignKey<Student>(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Student_StudentName");
            });

            modelBuilder.Entity<StudentCourse>(entity =>
            {
                entity.ToTable("Student_Course");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CourseId).HasColumnName("CourseID");

                entity.Property(e => e.ElBa2i)
                    .HasColumnType("money")
                    .HasColumnName("El_Ba2i");

                entity.Property(e => e.ElMdfo3)
                    .HasColumnType("money")
                    .HasColumnName("elMdfo3");

                entity.Property(e => e.ElTwki3)
                    .HasMaxLength(50)
                    .HasColumnName("El_Twki3");

                entity.Property(e => e.PayDate).HasColumnType("date");

                entity.Property(e => e.StudentId).HasColumnName("StudentID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.StudentCourse)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Student_Course_CourseAppointment");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.StudentCourse)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_Student_Course_StudentName");
            });

            modelBuilder.Entity<StudentName>(entity =>
            {
                entity.HasKey(e => e.StudentId);

                entity.Property(e => e.StudentId).HasColumnName("StudentID");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FourthName).HasMaxLength(50);

                entity.Property(e => e.SecondName).HasMaxLength(50);

                entity.Property(e => e.ThirdName).HasMaxLength(50);
            });

            modelBuilder.Entity<StudentPhoneNumber>(entity =>
            {
                entity.HasKey(e => e.StudentId);

                entity.Property(e => e.StudentId)
                    .ValueGeneratedNever()
                    .HasColumnName("StudentID");

                entity.Property(e => e.HomeNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("homeNumber");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.Phonenumber2)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("phonenumber2");

                entity.HasOne(d => d.Student)
                    .WithOne(p => p.StudentPhoneNumber)
                    .HasForeignKey<StudentPhoneNumber>(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StudentPhoneNumber_StudentName");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.Property(e => e.TeacherId).HasColumnName("TeacherID");

                entity.Property(e => e.TeacherName).HasMaxLength(50);

                entity.Property(e => e.TeacherPhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("teacherPhoneNumber");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Pass)
                    .HasMaxLength(50)
                    .HasColumnName("pass");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}